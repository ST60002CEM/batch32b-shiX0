// Mocks generated by Mockito 5.4.4 from annotations
// in sajilo_sales/test/unit_test/product_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sajilo_sales/core/failure/failure.dart' as _i5;
import 'package:sajilo_sales/features/products/domain/entity/product_entity.dart'
    as _i6;
import 'package:sajilo_sales/features/products/domain/usecases/product_usecase_repository.dart'
    as _i3;
import 'package:sajilo_sales/features/products/presentation/navigator/product_navigator.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUsecase extends _i1.Mock implements _i3.ProductUsecase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>> getAllProduct(
          int? page) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProduct,
          [page],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [page],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ProductEntity>>(
          this,
          Invocation.method(
            #getAllProduct,
            [page],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProductEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> deleteProduct(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProduct,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #deleteProduct,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> addProduct(
    _i6.ProductEntity? product,
    _i7.File? image,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [
            product,
            image,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addProduct,
            [
              product,
              image,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, String>>.value(
                _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #addProduct,
            [
              product,
              image,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}

/// A class which mocks [ProductNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductNavigator extends _i1.Mock implements _i8.ProductNavigator {
  @override
  dynamic openProductDetailView(_i6.ProductEntity? product) =>
      super.noSuchMethod(
        Invocation.method(
          #openProductDetailView,
          [product],
        ),
        returnValueForMissingStub: null,
      );
}
